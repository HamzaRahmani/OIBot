<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#
var scopes = @"esi-assets.read_assets.v1
esi-bookmarks.read_character_bookmarks.v1
esi-calendar.read_calendar_events.v1
esi-calendar.respond_calendar_events.v1
esi-characters.read_agents_research.v1
esi-characters.read_blueprints.v1
esi-characters.read_chat_channels.v1
esi-characters.read_contacts.v1
esi-characters.read_corporation_roles.v1
esi-characters.read_fatigue.v1
esi-characters.read_loyalty.v1
esi-characters.read_medals.v1
esi-characters.read_opportunities.v1
esi-characters.read_standings.v1
esi-characters.write_contacts.v1
esi-clones.read_clones.v1
esi-clones.read_implants.v1
esi-contracts.read_character_contracts.v1
esi-corporations.read_corporation_membership.v1
esi-corporations.read_structures.v1
esi-corporations.write_structures.v1
esi-fittings.read_fittings.v1
esi-fittings.write_fittings.v1
esi-fleets.read_fleet.v1
esi-fleets.write_fleet.v1
esi-industry.read_character_jobs.v1
esi-killmails.read_killmails.v1
esi-location.read_location.v1
esi-location.read_online.v1
esi-location.read_ship_type.v1
esi-mail.organize_mail.v1
esi-mail.read_mail.v1
esi-mail.send_mail.v1
esi-markets.read_character_orders.v1
esi-markets.structure_markets.v1
esi-planets.manage_planets.v1
esi-search.search_structures.v1
esi-skills.read_skillqueue.v1
esi-skills.read_skills.v1
esi-ui.open_window.v1
esi-ui.write_waypoint.v1
esi-universe.read_structures.v1
esi-wallet.read_character_wallet.v1";

var dicSb = new StringBuilder();
var enumSb = new StringBuilder();
ulong flagValue = 0;
string currentGroup = null;
var groupMembers = new List<string>();
var allMembers = new List<string>();
foreach (var scope in scopes.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries))
{

    var start = scope.IndexOf('.') + 1;
    var count = scope.LastIndexOf('.') - start;
    var sub = scope.Substring(start, count);
    var split = sub.Split('_');
    for (var i = 0; i < split.Length; i++)
    {
        split[i] = Capitalize(split[i]);
    }

    var groupName = Capitalize(scope.Substring(4, start - 5));

    if (groupName != currentGroup)
    {
        if (!string.IsNullOrEmpty(currentGroup))
        {
            enumSb.AppendLine("///<summary>");
            enumSb.AppendLine($"///All {currentGroup} permissions");
            enumSb.AppendLine("///</summary>");
            enumSb.AppendLine($"All{currentGroup} = {string.Join(" | ", groupMembers)},");
			allMembers.Add($"All{currentGroup}");
            groupMembers.Clear();
        }

        currentGroup = groupName;
    }

    var valueName = string.Join("", split);
    valueName = valueName.Replace(groupName, "");
    valueName = groupName + valueName;

    enumSb.AppendLine("///<summary>");
    enumSb.AppendLine($"///{scope}");
    enumSb.AppendLine("///</summary>");
    enumSb.AppendLine($"{valueName.PadRight(40)} = 1UL<<{flagValue},");

    groupMembers.Add(valueName);

    dicSb.AppendLine($"[\"{scope}\"] = EsiScope.{valueName},");

    flagValue += 1;
}

enumSb.AppendLine("///<summary>");
enumSb.AppendLine($"///All permissions");
enumSb.AppendLine("///</summary>");
enumSb.AppendLine($"All = {string.Join(" | ", allMembers)},");

var enumStr = enumSb.ToString();
var dicStr = dicSb.ToString();

string Capitalize(string str)
{
    var arr = str.ToCharArray();
    arr[0] -= (char)32;
    return new string(arr);
}
#>
//WARNING: 
//This file is generated automatically! Any modifications will be overwritten.

using System;
using System.Collections.Generic;

namespace EveESI
{
	///<summary>
	///ESI scope flags. Use <see cref="EsiScopeMap"/> to convert to and from strings.
	///</summary>
	[Flags]
	public enum EsiScope : ulong 
	{
		///<summary>
		///No permissions.
		///</summary>
		None = 0,
<# PushIndent("        "); #>
<#= enumStr #>
<# ClearIndent(); #>
	}

	///<summary>
	///Static class with methods to translate between a collection of ESI scope strings and the <see cref="EsiScope"/> enum.
	///</summary>
	public static class EsiScopeMap
	{
		public static IReadOnlyDictionary<string, EsiScope> Strings { get; } = new Dictionary<string, EsiScope>
		{
<# PushIndent("            "); #>
<#= dicStr #>
<# ClearIndent(); #>
		};

		public static IEnumerable<string> GetScopeStrings(EsiScope scope)
		{
			foreach (var kv in Strings)
			{
				if (scope.HasFlag(kv.Value))
					yield return kv.Key;
			}
		}

		public static EsiScope GetScopeEnum(params string[] scopes)
		{
			EsiScope scope = 0;
			foreach (var str in scopes)
			{
				scope |= Strings[str];
			}

			return scope;
		}
	}
}